{"name":"jsGrid","tagline":"Lightweight Grid jQuery Plugin","body":"# jsGrid Lightweight Grid jQuery Plugin\r\n\r\n**jsGrid** is a lightweight client-side data grid control based on jQuery.\r\nIt supports basic grid operations like inserting, filtering, editing, deleting, paging and sorting.\r\nAlthough jsGrid is tunable and allows to customize appearance and components.\r\n\r\n![jsGrid lightweight client-side data grid](http://content.screencast.com/users/tabalinas/folders/Jing/media/beada891-57fc-41f3-ad77-fbacecd01d15/00000002.png)\r\n\r\n## Table of contents\r\n\r\n* [Requirement](#requirement)\r\n* [Demo](#demo)\r\n* [Compatibility](#compatibility)\r\n* [Basic Usage](#basic-usage)\r\n* [Configuration](#configuration)\r\n* [Grid Fields](#grid-fields)\r\n* [Methods](#methods)\r\n* [Callbacks](#callbacks)\r\n* [Grid Controller](#grid-controller)\r\n* [Sorting Strategies](#sorting-strategies)\r\n\r\n## Requirement\r\n\r\njQuery (1.8.3 or later)\r\n\r\n\r\n## Demo\r\n\r\n[Demos](http://www.googledrive.com/host/0BwcJihi374AsdnhNeFk5bm1NaDA/demos/index.html)\r\ntemporary hosted on GoogleDrive (demos using external rest api don't work)\r\n\r\n\r\n## Compatibility\r\n\r\n**Desktop**\r\n\r\n* Chrome\r\n* Safari\r\n* Firefox\r\n* Opera 15+\r\n* IE 8+\r\n\r\n**Mobile**\r\n\r\n* Safari for iOS\r\n* Chrome for Android\r\n* IE10 for WP8\r\n\r\n\r\n## Basic Usage\r\n\r\nEnsure that jQuery library of version 1.8.3 or later is included.\r\n\r\nInclude `jsgrid.min.js` and `jsgrid.min.css` files into the web page.\r\n\r\nCreate grid applying jQuery plugin `jsGrid` with grid config as follows:\r\n\r\n````javascript\r\n\r\n$(\"#jsGrid\").jsGrid({\r\n    width: \"100%\",\r\n    height: \"400px\",\r\n\r\n    filtering: true,\r\n    editing: true,\r\n    sorting: true,\r\n    paging: true,\r\n\r\n    data: db.clients,\r\n\r\n    fields: [\r\n        { name: \"Name\", type: \"text\", width: 150 },\r\n        { name: \"Age\", type: \"number\", width: 50 },\r\n        { name: \"Address\", type: \"text\", width: 200 },\r\n        { name: \"Country\", type: \"select\", items: db.countries, valueField: \"Id\", textField: \"Name\" },\r\n        { name: \"Married\", type: \"checkbox\", title: \"Is Married\", sorting: false },\r\n        { type: \"control\" }\r\n    ]\r\n});\r\n\r\n````\r\n\r\n\r\n## Configuration\r\n\r\nThe config object may contain following options (default values are specified below):\r\n\r\n````javascript\r\n\r\n{\r\n    fields: [],\r\n    data: [],\r\n\r\n    autoload: false,\r\n    controller: {\r\n        loadData: $.noop,\r\n        insertItem: $.noop,\r\n        updateItem: $.noop,\r\n        deleteItem: $.noop\r\n    },\r\n\r\n    width: \"auto\",\r\n    height: \"auto\",\r\n\r\n    heading: true,\r\n    filtering: false,\r\n    inserting: false,\r\n    editing: false,\r\n    selecting: true,\r\n    sorting: false,\r\n    paging: false,\r\n    pageLoading: false,\r\n\r\n    rowClass: function(item, itemIndex) { ... },\r\n    rowClick: function(args) { ... },\r\n\r\n    noDataContent: \"Not found\",\r\n\r\n    confirmDeleting: true,\r\n    deleteConfirm: \"Are you sure?\",\r\n\r\n    pagerContainer: null,\r\n    pageIndex: 1,\r\n    pageSize: 20,\r\n    pageButtonCount: 15,\r\n    pagerFormat: \"Pages: {first} {prev} {pages} {next} {last} &nbsp;&nbsp; {pageIndex} of {pageCount}\",\r\n    pagePrevText: \"Prev\",\r\n    pageNextText: \"Next\",\r\n    pageFirstText: \"First\",\r\n    pageLastText: \"Last\",\r\n    pageNavigatorNextText: \"...\",\r\n    pageNavigatorPrevText: \"...\",\r\n\r\n    loadIndication: true,\r\n    loadIndicationDelay: 500,\r\n    loadMessage: \"Please, wait...\",\r\n    loadShading: true,\r\n\r\n    updateOnResize: true,\r\n\r\n    rowRenderer: null,\r\n    headerRowRenderer: null,\r\n    filterRowRenderer: null,\r\n    insertRowRenderer: null,\r\n    editRowRenderer: null\r\n}\r\n\r\n````\r\n\r\n### fields\r\nAn array of fields (columns) of the grid.\r\n\r\nEach field has general options and specific options depending on field type.\r\n\r\nGeneral options peculiar to all field types:\r\n\r\n````javascript\r\n\r\n{\r\n    type: \"\",\r\n    name: \"\",\r\n    title: \"\",\r\n    css: \"\",\r\n    align: \"\",\r\n    width: 100,\r\n\r\n    filtering: true,\r\n    inserting: true,\r\n    editing: true,\r\n    sorting: true,\r\n    sorter: \"string\",\r\n\r\n    headerTemplate: function() { ... },\r\n    itemTemplate: function(value, item) { ... },\r\n    filterTemplate: function() { ... },\r\n    insertTemplate: function() { ... },\r\n    editTemplate: function(value, item) { ... },\r\n\r\n    filterValue: function() { ... },\r\n    insertValue: function() { ... },\r\n    editValue: function() { ... },\r\n\r\n    cellRenderer: null\r\n}\r\n\r\n````\r\n\r\n- **type** is a string key of field (`\"text\"|\"number\"|\"checkbox\"|\"select\"|\"textarea\"|\"control\"`) in fields registry `jsGrid.fields` (the registry can be easily extended with custom field types).\r\n- **name** is a property of data item associated with the column.\r\n- **title** is a text to be displayed in the header of the column. If `title` is not specified, the `name` will be used instead.\r\n- **css** is a string representing css classes to be attached to the table cell.\r\n- **align** is alignment of text in the cell. Accepts following values `\"left\"|\"center\"|\"right\"`.\r\n- **width** is a width of the column.\r\n- **filtering** is a boolean specifying whether or not column has filtering (`filterTemplate()` is rendered and `filterValue()` is included in load filter object).\r\n- **inserting** is a boolean specifying whether or not column has inserting (`insertTemplate()` is rendered and `insertValue()` is included in inserting item).\r\n- **editing** is a boolean specifying whether or not column has editing (`editTemplate()` is rendered and `editValue()` is included in editing item).\r\n- **sorting** is a boolean specifying whether or not column has sorting ability.\r\n- **sorter** is a string or a function specifying how to sort item by the field. The string is a key of sorting strategy in the registry `jsGrid.sortStrategies` (the registry can be easily extended with custom sorting functions). Sorting function has the signature `function(value1, value2) { return -1|0|1; }`.\r\n- **headerTemplate** is a function to create column header content. It should return markup as string, DomNode or jQueryElement.\r\n- **itemTemplate** is a function to create cell content. It should return markup as string, DomNode or jQueryElement. The function signature is `function(value, item)`, where `value` is a value of column property of data item, and `item` is a row data item.\r\n- **filterTemplate** is a function to create filter row cell content. It should return markup as string, DomNode or jQueryElement.\r\n- **insertTemplate** is a function to create insert row cell content. It should return markup as string, DomNode or jQueryElement.\r\n- **editTemplate** is a function to create cell content of editing row. It should return markup as string, DomNode or jQueryElement. The function signature is `function(value, item)`, where `value` is a value of column property of data item, and `item` is a row data item.\r\n- **filterValue** is a function returning the value of filter property associated with the column.\r\n- **insertValue** is a function returning the value of inserting item property associated with the column.\r\n- **editValue** is a function returning the value of editing item property associated with the column.\r\n- **cellRenderer** is a function to customize cell rendering. The function signature is `function(value, item)`, where `value` is a value of column property of data item, and `item` is a row data item. The function should return markup as a string, jQueryElement or DomNode representing table cell `td`.\r\n\r\nSpecific field options depends on concrete field type.\r\nRead about build-in fields in [Grid Fields](#grid-fields) section.\r\n\r\n### data\r\nAn array of items to be displayed in the grid. The option should be used to provide static data. Use the `controller` option to provide non static data.\r\n\r\n### autoload (default `false`)\r\nA boolean value specifying whether `controller.loadData` will be called when grid is rendered.\r\n\r\n### controller\r\nAn object or function returning an object with the following structure:\r\n\r\n````javascript\r\n\r\n{\r\n    loadData: $.noop,\r\n    insertItem: $.noop,\r\n    updateItem: $.noop,\r\n    deleteItem: $.noop\r\n}\r\n\r\n````\r\n\r\n- **loadData** is a function returning an array of data or jQuery promise that will be resolved with an array of data (when `pageLoading` is `true` instead of object the structure `{ data: [items], itemsCount: [total items count] }` should be returned). Accepts filter parameter including current filter options and paging parameters when `pageLoading` is `true`.\r\n- **insertItem** is a function returning inserted item or jQuery promise that will be resolved with inserted item. Accepts inserting item object.\r\n- **updateItem** is a function returning updated item or jQuery promise that will be resolved with updated item. Accepts updating item object.\r\n- **deleteItem** is a function deleting item. Returns jQuery promise that will be resolved when deletion is completed. Accepts deleting item object.\r\n\r\nRead more about controller interface in [Grid Controller](#grid-controller) section.\r\n\r\n### width (default: `\"auto\"`)\r\nSpecifies the overall width of the grid.\r\nAccepts all value types accepting by `jQuery.width`.\r\n\r\n### height (default: `\"auto\"`)\r\nSpecifies the overall height of the grid including the pager.\r\nAccepts all value types accepting by `jQuery.height`.\r\n\r\n### heading (default: `true`)\r\nA boolean value specifies whether to show grid header or not.\r\n\r\n### filtering (default: `false`)\r\nA boolean value specifies whether to show filter row or not.\r\n\r\n### inserting (default: `false`)\r\nA boolean value specifies whether to show inserting row or not.\r\n\r\n### editing (default: `false`)\r\nA boolean value specifies whether editing is allowed.\r\n\r\n### selecting (default: `true`)\r\nA boolean value specifies whether to highlight grid rows on hover.\r\n\r\n### sorting (default: `false`)\r\nA boolean value specifies whether sorting is allowed.\r\n\r\n### paging (default: `false`)\r\nA boolean value specifies whether data is displayed by pages.\r\n\r\n### pageLoading (default: `false`)\r\nA boolean value specifies whether to load data by page.\r\nWhen `pageLoading` is `true` the `loadData` method of controller accepts `filter` parameter with two additional properties `pageSize` and `pageIndex`.\r\n\r\n### rowClass\r\nA string or a function specifying row css classes.\r\nA string contains classes separated with spaces.\r\nA function has signature `function(item, itemIndex)`. It accepts the data item and index of the item. It should returns a string containing classes separated with spaces.\r\n\r\n### rowClick\r\nA function handling row click. Accepts single argument with following structure:\r\n\r\n````javascript\r\n\r\n{\r\n     item       // data item\r\n     itemIndex  // data item index\r\n     event      // jQuery event\r\n}\r\n\r\n````\r\n\r\nBy default `rowClick` performs row editing when `editing` is `true`.\r\n\r\n### noDataContent (default `\"Not found\"`)\r\nA string or a function returning a markup, jQueryElement or DomNode specifying the content to be displayed when `data` is an empty array.\r\n\r\n### confirmDeleting (default `true`)\r\nA boolean value specifying whether to ask user to confirm item deletion.\r\n\r\n### deleteConfirm (default `\"Are you sure?\"`)\r\nA string or a function returning string specifying delete confirmation message to be displayed to the user.\r\nA function has the signature `function(item)` and accepts item to be deleted.\r\n\r\n### pagerContainer (default `null`)\r\nA jQueryElement or DomNode to specify where to render a pager. Used for external pager rendering. When it is equal to `null`, the pager is rendered at the bottom of the grid.\r\n\r\n### pageIndex (default `1`)\r\nAn integer value specifying current page index. Applied only when `paging` is `true`.\r\n\r\n### pageSize (default `20`)\r\nAn integer value specifying the amount of items on the page. Applied only when `paging` is `true`.\r\n\r\n### pageButtonCount (default `15`)\r\nAn integer value specifying the maximum amount of page buttons to be displayed in the pager.\r\n\r\n### pagerFormat\r\nA string specifying pager format.\r\nThe default value is  `\"Pages: {first} {prev} {pages} {next} {last} &nbsp;&nbsp; {pageIndex} of {pageCount}\"`\r\n\r\nThere are placeholders that can be used in the format:\r\n\r\n````javascript\r\n\r\n{first}     // link to first page\r\n{prev}      // link to previous page\r\n{pages}     // page links\r\n{next}      // link to next page\r\n{last}      // link to last page\r\n{pageIndex} // current page index\r\n{pageCount} // total amount of pages\r\n\r\n````\r\n\r\n### pageNextText (default `\"Next\"`)\r\nA string specifying the text of the link to the next page.\r\n\r\n### pagePrevText (default `\"Prev\"`)\r\nA string specifying the text of the link to the previous page.\r\n\r\n### pageFirstText (default `\"First\"`)\r\nA string specifying the text of the link to the first page.\r\n\r\n### pageLastText (default `\"Last\"`)\r\nA string specifying the text of the link to the last page.\r\n\r\n### pageNavigatorNextText (default `\"...\"`)\r\nA string specifying the text of the link to move to next set of page links, when total amount of pages more than `pageButtonCount`.\r\n\r\n### pageNavigatorPrevText (default `\"...\"`)\r\nA string specifying the text of the link to move to previous set of page links, when total amount of pages more than `pageButtonCount`.\r\n\r\n### loadIndication (default `true`)\r\nA boolean value specifying whether to show loading indication during controller operations execution.\r\n\r\n### loadIndicationDelay (default `500`)\r\nAn integer value specifying the delay in ms before showing load indication. Applied only when `loadIndication` is `true`.\r\n\r\n### loadMessage (default `\"Please, wait...\"`)\r\nA string specifying the text of loading indication panel. Applied only when `loadIndication` is `true`.\r\n\r\n### loadShading (default `true`)\r\nA boolean value specifying whether to show overlay (shader) over grid content during loading indication. Applied only when `loadIndication` is `true`.\r\n\r\n### updateOnResize (default `true`)\r\nA boolean value specifying whether to refresh grid on window resize event.\r\n\r\n### rowRenderer (default `null`)\r\nA function to customize row rendering. The function signature is `function(item, itemIndex)`, where `item` is row data item, and `itemIndex` is the item index.\r\nThe function should return markup as a string, jQueryElement or DomNode representing table row `tr`.\r\n\r\n### headerRowRenderer (default `null`)\r\nA function to customize grid header row.\r\nThe function should return markup as a string, jQueryElement or DomNode representing table row `tr`.\r\n\r\n### filterRowRenderer (default `null`)\r\nA function to customize grid filter row.\r\nThe function should return markup as a string, jQueryElement or DomNode representing table row `tr`.\r\n\r\n### insertRowRenderer (default `null`)\r\nA function to customize grid inserting row.\r\nThe function should return markup as a string, jQueryElement or DomNode representing table row `tr`.\r\n\r\n### editRowRenderer (default `null`)\r\nA function to customize editing row rendering. The function signature is `function(item, itemIndex)`, where `item` is row data item, and `itemIndex` is the item index.\r\nThe function should return markup as a string, jQueryElement or DomNode representing table row `tr`.\r\n\r\n\r\n## Grid Fields\r\n\r\nAll fields supporting by grid are stored in `jsGrid.fields` object, where key is a type of the field and the value is the field class.\r\n\r\n`jsGrid.fields` contains following build-in fields:\r\n\r\n````javascript\r\n\r\n{\r\n    text: { ... },      // simple text input\r\n    number: { ... },    // number input\r\n    select: { ... },    // select control\r\n    checkbox: { ... },  // checkbox input\r\n    textarea: { ... },  // textarea control (renders textarea for inserting and editing and text input for filtering)\r\n    control: { ... }    // control field with delete and editing buttons for data rows, search and add buttons for filter and inserting row\r\n}\r\n\r\n````\r\n\r\nEach build-in field can be easily customized with general configuration properties described in [fields](#fields) section and custom field-specific properties described below.\r\n\r\n### text\r\nText field renders `<input type=\"text\">` in filter, inserting and editing rows.\r\n\r\nCustom properties:\r\n\r\n````javascript\r\n\r\n{\r\n    autosearch: true    // triggers searching when the user presses `enter` key in the filter input\r\n}\r\n\r\n````\r\n\r\n### number\r\nNumber field renders `<input type=\"number\">` in filter, inserting and editing rows.\r\n\r\nCustom properties:\r\n\r\n````javascript\r\n\r\n{\r\n    sorter: \"number\",   // uses sorter for numbers\r\n    align: \"right\"      // right text alignment\r\n}\r\n\r\n````\r\n\r\n### select\r\nSelect field renders `<select>` control in filter, inserting and editing rows.\r\n\r\nCustom properties:\r\n\r\n````javascript\r\n\r\n{\r\n    align: \"center\",        // center text alignment\r\n    autosearch: true,       // triggers searching when the user changes the selected item in the filter\r\n    items: [],              // an array of items for select\r\n    valueField: \"\",         // name of property of item to be used as value\r\n    textField = \"\",         // name of property of item to be used as displaying value\r\n    selectedIndex: -1       // index of selected item by default\r\n}\r\n\r\n````\r\n\r\nIf valueField is not defined, then the item index is used instead.\r\nIf textField is not defined, then item itself is used to display value.\r\n\r\nFor instance the simple select field config may look like:\r\n\r\n````javascript\r\n\r\n{\r\n    name: \"Country\",\r\n    type: \"select\",\r\n    items: [ \"\", \"United States\", \"Canada\", \"United Kingdom\" ]\r\n}\r\n\r\n````\r\n\r\nor more complex with items as objects:\r\n\r\n````javascript\r\n\r\n{\r\n    name: \"Country\",\r\n    type: \"select\"\r\n    items: [\r\n         { Name: \"\", Id: 0 },\r\n         { Name: \"United States\", Id: 1 },\r\n         { Name: \"Canada\", Id: 2 },\r\n         { Name: \"United Kingdom\", Id: 3 }\r\n    ],\r\n    valueField: \"Id\",\r\n    textField: \"Name\"\r\n}\r\n\r\n````\r\n\r\n### checkbox\r\nCheckbox field renders `<input type=\"checkbox\">` in filter, inserting and editing rows.\r\nFilter checkbox supports intermediate state for, so click switches between 3 states (checked|intermediate|unchecked).\r\n\r\nCustom properties:\r\n\r\n````javascript\r\n\r\n{\r\n    sorter: \"number\",   // uses sorter for numbers\r\n    align: \"center\"     // center text alignment\r\n    autosearch: true    // triggers searching when the user clicks checkbox in filter\r\n}\r\n\r\n````\r\n\r\n### textarea\r\nTextarea field renders '<textarea>` in inserting and editing rows and `<input type=\"text\">` in filter row.\r\n\r\nCustom properties:\r\n\r\n````javascript\r\n\r\n{\r\n    autosearch: true    // triggers searching when the user presses `enter` key in the filter input\r\n}\r\n\r\n````\r\n\r\n### control\r\nControl field renders delete and editing buttons in data row, search and add buttons in filter and inserting row accordingly.\r\nIt also renders button switching between filtering and searching in header row.\r\n\r\nCustom properties:\r\n\r\n````javascript\r\n\r\n{\r\n    editButton: true,                               // show edit button\r\n    deleteButton: true,                             // show delete button\r\n    clearFilterButton: true,                        // show clear filter button\r\n    modeSwitchButton: true,                         // show switching filtering/inserting button\r\n\r\n    align: \"center\",                                // center content alignment\r\n    width: 50,                                      // default column width is 50px\r\n    filtering: false,                               // disable filtering for column\r\n    inserting: false,                               // disable inserting for column\r\n    editing: false,                                 // disable editing for column\r\n    sorting: false,                                 // disable sorting for column\r\n\r\n    searchModeButtonTooltip: \"Switch to searching\", // tooltip of switching filtering/inserting button in inserting mode\r\n    insertModeButtonTooltip: \"Switch to inserting\", // tooltip of switching filtering/inserting button in filtering mode\r\n    editButtonTooltip: \"Edit\",                      // tooltip of edit item button\r\n    deleteButtonTooltip: \"Delete\",                  // tooltip of delete item button\r\n    searchButtonTooltip: \"Search\",                  // tooltip of search button\r\n    clearFilterButtonTooltip: \"Clear filter\",       // tooltip of clear filter button\r\n    insertButtonTooltip: \"Insert\",                  // tooltip of insert button\r\n    updateButtonTooltip: \"Update\",                  // tooltip of update item button\r\n    cancelEditButtonTooltip: \"Cancel edit\",         // tooltip of cancel editing button\r\n}\r\n\r\n````\r\n\r\n### Custom Field\r\n\r\nIf you need a completely custom field, the object `jsGrid.fields` can be easily extended.\r\n\r\nIn this example we define new grid field `date`:\r\n\r\n````javascript\r\n\r\nvar MyDateField = function(config) {\r\n    jsGrid.Field.call(this, config);\r\n};\r\n\r\nMyDateField.prototype = new jsGrid.Field({\r\n\r\n    css: \"date-field\",            // redefine general property 'css'\r\n    align: \"center\",              // redefine general property 'align'\r\n\r\n    myCustomProperty: \"foo\",      // custom property\r\n\r\n    sorter: function(date1, date2) {\r\n        return new Date(date1) - new Date(date2);\r\n    },\r\n\r\n    itemTemplate: function(value) {\r\n        return new Date(value).toDateString();\r\n    },\r\n\r\n    insertTemplate: function(value) {\r\n        return this._insertPicker = $(\"<input>\").datepicker({ defaultDate: new Date() });\r\n    },\r\n\r\n    editTemplate: function(value) {\r\n        return this._editPicker = $(\"<input>\").datepicker().datepicker(\"setDate\", new Date(value));\r\n    },\r\n\r\n    insertValue: function() {\r\n        return this._insertPicker.datepicker(\"getDate\").toISOString();\r\n    },\r\n\r\n    editValue: function() {\r\n        return this._editPicker.datepicker(\"getDate\").toISOString();\r\n    }\r\n});\r\n\r\njsGrid.fields.date = MyDateField;\r\n\r\n````\r\n\r\nTo have all general grid field properties custom field class should inherit `jsGrid.Field` class or any other field class.\r\nHere `itemTemplate` just returns the string representation of a date.\r\n`insertTemplate` and `editTemplate` create jQuery UI datePicker for inserting and editing row.\r\nOf course jquery ui library should be included to make it work.\r\n`insertValue` and `editValue` return date to insert and update items accordingly.\r\nWe also defined date specific sorter.\r\n\r\nNow, our new field `date` can be used in the grid config as follows:\r\n\r\n````javascript\r\n\r\n{\r\n    fields: [\r\n      ...\r\n      { type: \"date\", myCustomProperty: \"bar\" },\r\n      ...\r\n    ]\r\n}\r\n\r\n````\r\n\r\n\r\n## Methods\r\n\r\njsGrid methods could be called with `jsGrid` jQuery plugin or directly.\r\n\r\nTo use jsGrid plugin to call a method, just call `jsGrid` with method name and required parameters as next arguments:\r\n\r\n````javascript\r\n\r\n// calling method with jQuery plugin\r\n$(\"#grid\").jsGrid(\"methodName\", param1, param2);\r\n\r\n````\r\n\r\nTo call method directly you need to retrieve grid instance or just create grid with the constructor:\r\n\r\n````javascript\r\n\r\n// retrieve grid instance from element data\r\nvar grid = $(\"#grid\").data(\"JSGrid\");\r\n\r\n// create grid with the constructor\r\nvar grid = new jsGrid.Grid($(\"#grid\"), { ... });\r\n\r\n// call method directly\r\ngrid.methodName(param1, param2); \r\n\r\n````\r\n\r\n### cancelEdit()\r\nCancels row editing. \r\n\r\n````javascript\r\n\r\n$(\"#grid\").jsGrid(\"cancelEdit\");\r\n\r\n````\r\n\r\n### clearFilter(): `Promise`\r\nClears current filter and performs search with empty filter.\r\nReturns jQuery promise resolved when data filtering is completed. \r\n\r\n````javascript\r\n\r\n$(\"#grid\").jsGrid(\"clearFilter\").done(function() {\r\n    console.log(\"filtering completed\");\r\n});\r\n\r\n````\r\n\r\n### clearInsert()\r\nClears current inserting row. \r\n\r\n````javascript\r\n\r\n$(\"#grid\").jsGrid(\"clearInsert\");\r\n\r\n````\r\n\r\n### deleteItem(item|$row|rowNode): `Promise`\r\nRemoves specified row from the grid.\r\nReturns jQuery promise resolved when deletion is completed.\r\n\r\n**item|$row|rowNode** is the reference to the item or the row jQueryElement or the row DomNode.\r\n\r\n````javascript\r\n\r\n// delete row by item reference\r\n$(\"#grid\").jsGrid(\"deleteItem\", item);\r\n\r\n// delete row by jQueryElement\r\n$(\"#grid\").jsGrid(\"deleteItem\", $(\".specific-row\"));\r\n\r\n// delete row by DomNode\r\n$(\"#grid\").jsGrid(\"deleteItem\", rowNode);\r\n\r\n````\r\n\r\n### destroy()\r\nDestroys the grid and brings the Node to its original state.\r\n\r\n````javascript\r\n\r\n$(\"#grid\").jsGrid(\"destroy\");\r\n\r\n````\r\n\r\n### editItem(item|$row|rowNode)\r\nSets grid editing row.\r\n\r\n**item|$row|rowNode** is the reference to the item or the row jQueryElement or the row DomNode.\r\n\r\n````javascript\r\n\r\n// edit row by item reference\r\n$(\"#grid\").jsGrid(\"editItem\", item);\r\n\r\n// edit row by jQueryElement\r\n$(\"#grid\").jsGrid(\"editItem\", $(\".specific-row\"));\r\n\r\n// edit row by DomNode\r\n$(\"#grid\").jsGrid(\"editItem\", rowNode);\r\n\r\n````\r\n\r\n### insertItem([item]): `Promise`\r\nInserts row into the grid based on item.\r\nReturns jQuery promise resolved when insertion is completed. \r\n \r\n**item** is the item to pass to `controller.insertItem`. \r\n\r\nIf `item` is not specified the data from inserting row will be inserted.\r\n\r\n````javascript\r\n\r\n// insert item from inserting row\r\n$(\"#grid\").jsGrid(\"insertItem\");\r\n\r\n// insert item\r\n$(\"#grid\").jsGrid(\"insertItem\", { Name: \"John\", Age: 25, Country: 2 }).done(function() {\r\n    console.log(\"insertion completed\");\r\n});\r\n\r\n````\r\n\r\n### openPage(pageIndex)\r\nOpens the page of specified index.\r\n\r\n**pageIndex** is one-based index of the page to open. The value should be in range from 1 to [total amount of pages].\r\n\r\n\r\n### option(key, [value])\r\nGets or sets the value of an option.\r\n \r\n**key** is the name of the option.\r\n\r\n**value** is the new option value to set. \r\n\r\nIf `value` is not specified, then the value of the option `key` will be returned.\r\n\r\n````javascript\r\n\r\n// turn off paging\r\n$(\"#grid\").jsGrid(\"option\", \"paging\", false);\r\n\r\n// get current page index\r\nvar pageIndex = $(\"#grid\").jsGrid(\"option\", \"pageIndex\");\r\n\r\n````\r\n\r\n### refresh()\r\nRefreshes the grid. Renders the grid body and pager content, recalculates sizes.\r\n\r\n````javascript\r\n\r\n$(\"#grid\").jsGrid(\"refresh\");\r\n\r\n````\r\n\r\n### render(): `Promise`\r\nPerforms complete grid rendering. If option `autoload` is `true` calls `controller.loadData`. The state of the grid like current page and sorting is retained. \r\nReturns jQuery promise resolved when data loading is completed. If auto-loading is disabled the promise is instantly resolved.   \r\n\r\n````javascript\r\n\r\n$(\"#grid\").jsGrid(\"render\").done(function() {\r\n    console.log(\"rendering completed and data loaded\");\r\n});\r\n\r\n````\r\n\r\n### reset()\r\nResets the state of the grid. Goes to the first data page, resets sorting, and then calls `refresh`.  \r\n\r\n````javascript\r\n\r\n$(\"#grid\").jsGrid(\"reset\");\r\n\r\n````\r\n\r\n### search([filter]): `Promise`\r\nPerforms filtering of the grid.\r\nReturns jQuery promise resolved when data loading is completed. \r\n \r\n**filter** is a filter to pass to `controller.loadData`. \r\n\r\nIf `filter` is not specified the current filter (filtering row values) will be applied.\r\n\r\n````javascript\r\n\r\n// search with current grid filter\r\n$(\"#grid\").jsGrid(\"search\");\r\n\r\n// search with custom filter\r\n$(\"#grid\").jsGrid(\"search\", { Name: \"John\" }).done(function() {\r\n    console.log(\"filtering completed\");\r\n});\r\n\r\n````\r\n\r\n### showPrevPages()\r\nShows previous set of pages, when total amount of pages more than `pageButtonCount`.\r\n\r\n````javascript\r\n\r\n$(\"#grid\").jsGrid(\"showPrevPages\");\r\n\r\n````\r\n\r\n### showNextPages()\r\nShows next set of pages, when total amount of pages more than `pageButtonCount`.\r\n\r\n````javascript\r\n\r\n$(\"#grid\").jsGrid(\"showNextPages\");\r\n\r\n````\r\n\r\n### sort(sortConfig|field, [order]): `Promise`\r\nSorts grid by specified field.\r\nReturns jQuery promise resolved when sorting is completed.\r\n\r\n**sortConfig** is the plain object of the following structure `{ field: (fieldIndex|fieldName|field), order: (\"asc\"|\"desc\") }`\r\n\r\n**field** is the field to sort by. It could be zero-based field index or field name or field reference\r\n\r\n**order** is the sorting order. Accepts the following values: \"asc\"|\"desc\"\r\n\r\nIf `order` is not specified, then data is sorted in the reversed to current order, when grid is already sorted by the same field. Or `\"asc\"` for sorting by another field.\r\n\r\nWhen grid data is loaded by pages (`pageLoading` is `true`) sorting calls `controller.loadData` with sorting parameters. Read more in [Grid Controller](#grid-controller) section.\r\n\r\n````javascript\r\n\r\n// sorting grid by first field\r\n$(\"#grid\").jsGrid(\"sort\", 0);\r\n\r\n// sorting grid by field \"Name\" in descending order\r\n$(\"#grid\").jsGrid(\"sort\", { field: \"Name\", order: \"desc\" });\r\n\r\n// sorting grid by myField in ascending order \r\n$(\"#grid\").jsGrid(\"sort\", myField, \"asc\").done(function() {\r\n    console.log(\"sorting completed\");\r\n});\r\n\r\n````\r\n\r\n### updateItem([item|$row|rowNode], [editedItem]): `Promise`\r\nUpdates item and row of the grid.\r\nReturns jQuery promise resolved when update is completed.\r\n \r\n**item|$row|rowNode** is the reference to the item or the row jQueryElement or the row DomNode.\r\n\r\n**editedItem** is the changed item to pass to `controller.updateItem`.\r\n\r\nIf `item|$row|rowNode` is not specified then editing row will be updated.\r\n\r\nIf `editedItem` is not specified the data from editing row will be taken.\r\n\r\n````javascript\r\n\r\n// update currently editing row\r\n$(\"#grid\").jsGrid(\"updateItem\");\r\n\r\n// update currently editing row with specified data\r\n$(\"#grid\").jsGrid(\"updateItem\", { ID: 1, Name: \"John\", Age: 25, Country: 2 });\r\n\r\n// update specified item with particular data (row DomNode or row jQueryElement can be used instead of item reference)\r\n$(\"#grid\").jsGrid(\"updateItem\", item, { ID: 1, Name: \"John\", Age: 25, Country: 2 }).done(function() {\r\n    console.log(\"update completed\");\r\n});\r\n\r\n````\r\n\r\n\r\n## Callbacks\r\n\r\n### onDataLoading\r\nFires before data loading.\r\n\r\nHas following arguments:\r\n\r\n````javascript\r\n\r\n{\r\n    grid                // grid instance\r\n    filter              // loading filter object\r\n}\r\n\r\n````\r\n\r\n### onDataLoaded\r\nFires after data loading.\r\n\r\nHas following arguments:\r\n\r\n````javascript\r\n\r\n{\r\n    grid                // grid instance\r\n    data                // load result (array of items or data structure for loading by page scenario) \r\n}\r\n\r\n````\r\n\r\n### onError\r\nFires when controller handler promise failed.\r\n\r\nHas following arguments:\r\n\r\n````javascript\r\n\r\n{\r\n    grid                // grid instance\r\n    args                // an array of arguments provided to fail promise handler \r\n}\r\n\r\n````\r\n\r\n### onItemDeleting\r\nFires before item deletion.\r\n\r\nHas following arguments:\r\n\r\n````javascript\r\n\r\n{\r\n    grid                // grid instance\r\n    row                 // deleting row jQuery element\r\n    item                // deleting item\r\n    itemIndex           // deleting item index\r\n}\r\n\r\n````\r\n\r\n### onItemDeleted\r\nFires after item deletion.\r\n\r\nHas following arguments:\r\n\r\n````javascript\r\n\r\n{\r\n    grid                // grid instance\r\n    row                 // deleted row jQuery element\r\n    item                // deleted item\r\n    itemIndex           // deleted item index\r\n}\r\n\r\n````\r\n\r\n### onItemInserting\r\nFires before item insertion.\r\n\r\nHas following arguments:\r\n\r\n````javascript\r\n\r\n{\r\n    grid                // grid instance\r\n    item                // inserting item\r\n}\r\n\r\n````\r\n\r\n### onItemInserted\r\nFires after item insertion.\r\n\r\nHas following arguments:\r\n\r\n````javascript\r\n\r\n{\r\n    grid                // grid instance\r\n    item                // inserted item\r\n}\r\n\r\n````\r\n\r\n### onItemUpdating\r\nFires before item update.\r\n\r\nHas following arguments:\r\n\r\n````javascript\r\n\r\n{\r\n    grid                // grid instance\r\n    row                 // updating row jQuery element\r\n    item                // updating item\r\n    itemIndex           // updating item index\r\n}\r\n\r\n````\r\n\r\n### onItemUpdated\r\nFires after item update.\r\n\r\nHas following arguments:\r\n\r\n````javascript\r\n\r\n{\r\n    grid                // grid instance\r\n    row                 // updated row jQuery element\r\n    item                // updated item\r\n    itemIndex           // updated item index\r\n}\r\n\r\n````\r\n\r\n### onOptionChanging\r\nFires before grid option value change.\r\n\r\nHas following arguments:\r\n\r\n````javascript\r\n\r\n{\r\n    grid                // grid instance\r\n    option              // name of option to be changed\r\n    oldValue            // old value of option\r\n    newValue            // new value of option\r\n}\r\n\r\n````\r\n\r\n### onOptionChanged\r\nFires after grid option value change.\r\n\r\nHas following arguments:\r\n\r\n````javascript\r\n\r\n{\r\n    grid                // grid instance\r\n    option              // name of changed option\r\n    value               // changed option value\r\n}\r\n\r\n````\r\n\r\n### onRefreshing\r\nFires before grid refresh.\r\n\r\nHas following arguments:\r\n\r\n````javascript\r\n\r\n{\r\n    grid                // grid instance\r\n}\r\n\r\n````\r\n\r\n### onRefreshed\r\nFires after grid refresh.\r\n\r\nHas following arguments:\r\n\r\n````javascript\r\n\r\n{\r\n    grid                // grid instance\r\n}\r\n\r\n````\r\n\r\n\r\n## Grid Controller\r\n\r\nThe controller is a gateway between grid and data storage. All data manipulations call accordant controller methods.\r\nBy default grid has an empty controller and can work with static array of items stored in option `data`.\r\n \r\nA controller should implement following interface:\r\n\r\n````javascript\r\n\r\n{\r\n    loadData\r\n    insertItem\r\n    updateItem\r\n    deleteItem\r\n}\r\n\r\n````\r\n\r\nFor instance the controller for typical REST service might look like:\r\n\r\n````javascript\r\n\r\n{\r\n    loadData: function(filter) {\r\n        return $.ajax({\r\n            type: \"GET\",\r\n            url: \"/items\",\r\n            data: filter,\r\n            dataType: \"json\"\r\n        });\r\n    },\r\n    \r\n    insertItem: function(item) {\r\n        return $.ajax({\r\n            type: \"POST\",\r\n            url: \"/items\",\r\n            data: item,\r\n            dataType: \"json\"\r\n        });\r\n    },\r\n    \r\n    updateItem: function(item) {\r\n        return $.ajax({\r\n            type: \"PUT\",\r\n            url: \"/items\",\r\n            data: item,\r\n            dataType: \"json\"\r\n        });\r\n    },\r\n    \r\n    deleteItem: function(filter) {\r\n        return $.ajax({\r\n            type: \"DELETE\",\r\n            url: \"/items\",\r\n            data: filter,\r\n            dataType: \"json\"\r\n        });\r\n    },\r\n}\r\n\r\n````\r\n\r\n### loadData(filter): `Promise|dataResult`\r\nCalled on data loading.\r\n\r\n**filter** contains all filter parameters of fields with enabled filtering\r\n\r\nWhen `pageLoading` is `true` and data is loaded by page, `filter` includes two more parameters:\r\n\r\n````javascript\r\n\r\n{\r\n    pageIndex     // current page index\r\n    pageSize      // the size of page\r\n}\r\n\r\n````\r\n\r\nWhen grid sorting is enabled, `filter` includes two more parameters:\r\n\r\n````javascript\r\n\r\n{\r\n    sortField     // the name of sorting field\r\n    sortOrder     // the order of sorting as string \"asc\"|\"desc\"\r\n}\r\n\r\n````\r\n\r\nMethod should return `dataResult` or jQuery promise that will be resolved with `dataResult`.\r\n  \r\n**dataResult** depends on `pageLoading`. When `pageLoading` is `false` (by default), then data result is a plain javascript array of objects.\r\nIf `pageLoading` is `true` data result should have following structure \r\n\r\n````javascript\r\n\r\n{\r\n    data          // array of items\r\n    itemsCount    // total items amount in storage\r\n}\r\n\r\n````\r\n\r\n### insertItem(item): `Promise|insertedItem`\r\nCalled on item insertion.\r\n\r\nMethod should return `insertedItem` or jQuery promise that will be resolved with `insertedItem`. \r\nIf no item is returned, inserting item will be used as inserted item. \r\n\r\n**item** is the item to be inserted.\r\n\r\n### updateItem(item): `Promise|updatedItem`\r\nCalled on item update.\r\n\r\nMethod should return `updatedItem` or jQuery promise that will be resolved with `updatedItem`.\r\nIf no item is returned, updating item will be used as updated item.\r\n\r\n**item** is the item to be updated.\r\n\r\n### deleteItem(item): `Promise`\r\nCalled on item deletion.\r\n\r\nIf deletion is asynchronous, method should return jQuery promise that will be resolved when deletion is completed.\r\n\r\n**item** is the item to be deleted.\r\n\r\n\r\n## Sorting Strategies\r\n\r\nAll supported sorting strategies are stored in `jsGrid.sortStrategies` object, where key is a name of the strategy and the value is a `sortingFunction`.\r\n\r\n`jsGrid.sortStrategies` contains following build-in sorting strategies:\r\n\r\n````javascript\r\n\r\n{\r\n    string: { ... },          // string sorter\r\n    number: { ... },          // number sorter\r\n    date: { ... },            // date sorter\r\n    numberAsString: { ... }   // numbers are parsed before comparison\r\n}\r\n\r\n````\r\n\r\n**sortingFunction** is a sorting function with the following format:\r\n\r\n````javascript\r\n\r\nfunction(value1, value2) {\r\n    if(value1 < value2) return -1; // return negative value when first is less than second\r\n    if(value1 === value2) return 0; // return zero if values are equal\r\n    if(value1 > value2) return 1; // return positive value when first is greater than second\r\n}\r\n\r\n````\r\n\r\n### Custom Sorting Strategy\r\n\r\nIf you need a custom sorting strategy, the object `jsGrid.sortStrategies` can be easily extended.\r\n\r\nIn this example we define new sorting strategy for our client objects:\r\n\r\n````javascript\r\n\r\n// client object format\r\nvar clients = [{\r\n    Name: \"John\",\r\n    Age: 25\r\n}, ...];\r\n\r\n// sort clients by name and then by age\r\njsGrid.sortStrategies.client = function(client1, client2) {\r\n    return client1.Name.localeCompare(client2.Name) \r\n        || client1.Age - client2.Age;\r\n};\r\n\r\n````\r\n\r\nNow, our new sorting strategy `client` can be used in the grid config as follows:\r\n\r\n````javascript\r\n\r\n{\r\n    fields: [\r\n      ...\r\n      { type: \"text\", name: \"Name\", sorter: \"client\" },\r\n      ...\r\n    ]\r\n}\r\n\r\n````\r\n\r\nWorth to mention, that if you need particular sorting only once, you can just inline sorting function in `sorter` not registering the new strategy:\r\n\r\n````javascript\r\n\r\n{\r\n    fields: [\r\n      ...\r\n      { \r\n          type: \"text\", \r\n          name: \"Name\", \r\n          sorter: function(client1, client2) {\r\n              return client1.Name.localeCompare(client2.Name) \r\n                  || client1.Age - client2.Age;\r\n          } \r\n      },\r\n      ...\r\n    ]\r\n}\r\n\r\n````\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}